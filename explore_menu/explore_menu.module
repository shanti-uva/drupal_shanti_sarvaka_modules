<?php 

// Define CONSTANTS used by this module: css class and title
define('EXPLORE_SECTION_CLASS', 'container opencollect collections');
define('EXPLORE_DIV_CLASS', 'col-sm-12 col-md-10 col-md-offset-1');
define('EXPLORE_DIV_TITLE', 'EXPLORE');
define('EXPLORE_LINK_TEXT', 'EXPLORE');

/**
 * Implements hook_menu().
 */
function explore_menu_menu() {
	
  $items['admin/config/user-interface/explore_menu'] = array(
    'title' => 'Shanti Explore Menu',
    'description' => 'Configure Shanti Explore menu',
    'page callback' => 'explore_menu_configure',
    'access arguments' => array('administer site configuration'),
  );
	
  return $items;
}

function explore_menu_configure() {
	drupal_goto('admin/structure/block/manage/explore_menu/explore_menu_block/configure');
}

/**
 * Implements hook_block_info().
 */
function explore_menu_block_info() {
  $blocks = array();
  $blocks['explore_menu_block'] = array(
    'info' => t('Shanti Explore Menu Block'),
   );
  return $blocks;
}

/**
 * display link for opening and closing explore menu (meant for Shanti Sarvaka theme)
 */
function explore_menu_block_view($delta='') {
	$block = array();
	switch($delta) {
		case 'explore_menu_block': 
			$out = '<li id="collexplink" class="explore closed"><a href="#">' . variable_get('explore_link_text', EXPLORE_LINK_TEXT) . '<i class="icon shanticon-directions"></i></a></li>';
			$block['content'] = $out;
			break;
	}
	return $block;
}

/**
 * Add explore_menu to vars with the shanti-explore menu tree in it to be displayed in page template
 * Modify tree to keep disabled links with #attribute/disabled to be displayed as greyed out.
 */
function explore_menu_preprocess_page(&$vars) {
	
	//$vars['explore_menu'] = menu_tree('shanti-explore-menu');
	
	$hidden = array();
	$menu_name = 'shanti-explore-menu';
  $tree = menu_tree_page_data($menu_name);
	foreach($tree as $tid => &$item) {
	  if($item['link']['hidden'] == 1) {
	    $hidden[] = $item['link']['mlid'];
	    $item['link']['hidden'] = 0;
	  }
	}

  $mto = menu_tree_output($tree);
	foreach($hidden as $hid) {
	  $mto[$hid]['#attributes']['disabled'] = 'disabled'; 
	}
	$vars['explore_menu'] = $mto;
}

/**
* Implements hook_block_configure().
*   Configures classes for section and div element plus the title text for the popup
*/
function explore_menu_block_configure($delta='explore_menu_block') {
  $form = array();
  
  switch($delta) {
    case 'explore_menu_block' :
      // Explore Div Class Attribute Value
      $form['explore_section_class'] = array(
        '#type' => 'textfield',
        '#title' => t('Section Element Class'),
        '#description' => t('The value for the class attribute of the section element containing the content div'),
        '#default_value' => variable_get('explore_section_class', EXPLORE_SECTION_CLASS),
      );
      
      // Explore Div Class Attribute Value
      $form['explore_div_class'] = array(
        '#type' => 'textfield',
        '#title' => t('Containing Div Class'),
        '#description' => t('The value for the class attribute of the div containing the links to the collections'),
        '#default_value' => variable_get('explore_div_class', EXPLORE_DIV_CLASS),
      );
      
      // Explore Div Title
      $form['explore_div_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#description' => t('Title to display at the top of the collection links'),
        '#default_value' => variable_get('explore_div_title', EXPLORE_DIV_TITLE),
      );
            
      // Explore Div Link Text
      $form['explore_link_text'] = array(
        '#type' => 'textfield',
        '#title' => t('Link Text'),
        '#description' => t('Text for button in top bar'),
        '#default_value' => variable_get('explore_link_text', EXPLORE_LINK_TEXT),
      );
      
      // Explanation of where data comes from
      $form['data_explanation'] = array(
        '#type' => 'markup',
        '#markup' => '<div><strong>' . t('Note:') . '</strong> ' . 
          t('The links themselves are defined by a JSON file contained with the Shanti Explore Menu module\'s js folder.') . '</div>',
                      
      );
			
			// Update links field set
			$form['update_links'] = array(
				'#type' => 'fieldset',
				'#title' => t('Reset Menu Links'),
			);
				// Instructions
			$form['update_links']['desc'] = array(
				'#type' => 'markup',
				'#markup' => t('<p style="width: 80%;">The button below will reset the links in the explorer menu from the JSON file in the explorer menu module. You must first choose the server, or domain, you are working with from the drop down list.</p>'),
			);
				// Choose domain
			$form['update_links']['update_links_domain'] = array(
				'#type' => 'select',
				'#options' => array(
					'none' => t('Choose a Domain'),
					'dev' => t('Dev'),
					'test' => t('Test'),
					'prod' => t('Production'),
				),
			);
				// Update Button
		  $form['update_links']['update_button'] = array(
		    '#type' => 'button',
		    '#value' => t('Reset Links'),
		    '#attributes' => array('title' => t('Reset Explore Menu Links from JSON File')),
		    '#prefix' => '<div class="form-item">',
		    '#suffix' => '<div id="em-update-msg"></div></div>',
		    '#states' => array(
		      'invisible' => array(
		        ':input[name="update_links_domain"]' => array('value' => 'none'),
		      ),
		    ),
		    '#ajax' => array(
				  'callback' => 'explore_menu_update',
		      'wrapper' => 'em-update-msg',
		      'method' => 'replace',
				),
		  );
	
      break; // Explore block case switch break
  }
  
  return $form;
}

function explore_menu_block_save($delta = '', $edit = array()) {
	variable_set('explore_section_class', $edit['explore_section_class']);
	variable_set('explore_div_class', $edit['explore_div_class']);
	variable_set('explore_div_title', $edit['explore_div_title']);
	variable_set('explore_link_text', $edit['explore_link_text']);
}

/**
 * Used by theme to get the icon class for a link with a specific title. Means all links must have unique titles. Could use href?
 */
function explore_menu_get_iconclass($title) {
  $datastr = file_get_contents(drupal_get_path('module', 'explore_menu') . '/js/shanti-collections.json');
  $json = json_decode($datastr);
  foreach($json->links->prod as $n => $link) {
    if($link->text == $title) {
      return $link->class;
    }
  }
  return FALSE;
}

/**
 * Updates explore menu links from JS at explore_menu/js/shanti-collections.json
 * TODO: Allow users to upload their custom js files (?)
 */
function explore_menu_update($form, $form_state) {
	global $base_url, $base_path;
	$domain = $form_state['values']['update_links_domain'];
  $data = file_get_contents(drupal_get_path('module', 'explore_menu') . '/js/shanti-collections.json');
	// Remove all previous links
	$mn = 'shanti-explore-menu';
	$linktree = menu_tree_all_data($mn);
	$rct = 0;
	foreach($linktree as $lnm => $link) {
		$mlid = $link['link']['mlid'];
		menu_link_delete($mlid);
		$rct++;
	}
	$jsondata = json_decode($data);
  $linkdata = $jsondata->links->{$domain};
	$msg = "";
	$ct = 0;
	if(empty($linkdata)) {
		$msg = t('<p style="color:red;">The domain you have chosen is not valid.</p>');
	} else {
	  foreach($linkdata as $n => $link) {
	  	if(!isset($link->disabled) || $link->disabled == FALSE) {
	  		$hrefchar = substr($link->href,0,1);
				if($hrefchar == '/' || $hrefchar == '#') {
					$link->href = $base_url . $base_path . $link->href;
				}
		    $item = array(
		      'link_path' => $link->href,
		      'link_title' => $link->text,
		      'menu_name' => $mn,
		      'weight' => ($n - 50),
		      'language' => $linkdata->language,
		      'plid' => 0, // Parent menu item, 0 if menu item is on top level
		      'module' => 'menu',
		    );
		    $mlid = menu_link_save($item); 
				if(!$mlid) {
					$msg .= "<li class=\"alert-warning\">{$item['link_title']} ({$item['link_path']}) could not be saved.</li>";
				} else {
					$ct++;
				}
			}
	  }
	  if(empty($msg)) {
	  	$msg = "<ul><li class=\"alert-success\">Explore Collections Menus was successfully updated! ($rct items removed. $ct items added.)</li></ul>";
	  } else {
	  	$msg = '<ul>' . $msg . '</ul>';
	  }
	}
	return "<div id=\"em-update-msg\">$msg</div>";
}
